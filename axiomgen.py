# -*- coding: utf-8 -*-
"""AxiomRecommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qAsts8_g4jMTBR3HBDmsXtazqo0cF0Eh
"""

import nltk
from collections import defaultdict
from nltk.tokenize import sent_tokenize, word_tokenize

import os
import re
import random
import array
import sys
from ast import literal_eval

def axiom_subclass(filename):
  
    arra=[]
    arra1=[]
    with open(filename) as fd:

    # Iterate over the lines
        for line in fd:
            #print(line)
        # Capture one-or-more characters of non-whitespace after the initial match
            match = re.search(r'<SubClassOf(\S+)', line)
            

        # Did we find a match?
            if match:
            # Yes, process it
                line=next(fd)
               # print(line)
                match1 = re.search(r'Class IRI=(\S+)', line)
                if match1:
                    size = match1.group(1)
               
                    arra.append(size)
                line=next(fd)
                match2 = re.search(r'Class IRI=(\S+)', line)
                if match2:
                    size = match2.group(1)
               
                    arra.append(size)
    return arra,arra1

def axiom_disjoinclass(filename):
  
    arra=[]
    arra1=[]
    with open(filename) as fd:

    # Iterate over the lines
        for line in fd:
            #print(line)
        # Capture one-or-more characters of non-whitespace after the initial match
            match = re.search(r'<DisjointClasses(\S+)', line)
            

        # Did we find a match?
            if match:
            # Yes, process it
                line=next(fd)
               # print(line)
                match1 = re.search(r'Class IRI=(\S+)', line)
                if match1:
                    size = match1.group(1)
               
                    arra.append(size)
                line=next(fd)
                match2 = re.search(r'Class IRI=(\S+)', line)
                if match2:
                    size = match2.group(1)
               
                    arra.append(size)
    return arra,arra1

def subobjectproperty(filename):
  
    arra=[]
    arra1=[]
    with open(filename) as fd:

    # Iterate over the lines
        for line in fd:
            #print(line)
        # Capture one-or-more characters of non-whitespace after the initial match
            match = re.search(r'<SubObjectPropertyOf(\S+)', line)
            

        # Did we find a match?
            if match:
            # Yes, process it
                line=next(fd)
               # print(line)
                match1 = re.search(r'ObjectProperty IRI(\S+)', line)
                if match1:
                    size = match1.group(1)
               
                    arra.append(size)
                line=next(fd)
                match2 = re.search(r'ObjectProperty IRI(\S+)', line)
                if match2:
                    size = match2.group(1)
               
                    arra.append(size)
    return arra,arra1

def inverseproperty(filename):
  
    arra=[]
    arra1=[]
    with open(filename) as fd:

    # Iterate over the lines
        for line in fd:
            #print(line)
        # Capture one-or-more characters of non-whitespace after the initial match
            match = re.search(r'<InverseObjectProperties(\S+)', line)
            

        # Did we find a match?
            if match:
            # Yes, process it
                line=next(fd)
               # print(line)
                match1 = re.search(r'ObjectProperty IRI(\S+)', line)
                if match1:
                    size = match1.group(1)
               
                    arra.append(size)
                line=next(fd)
                match2 = re.search(r'ObjectProperty IRI(\S+)', line)
                if match2:
                    size = match2.group(1)
               
                    arra.append(size)
    return arra,arra1

def pre_process1(filename):
    arra, arra1 = axiom_subclass(filename)
    final_arra = []
    final_arra1 = []
    final_arra2 = []

    for i in range(0, len(arra)):
        try:
            s = arra[i].split('#')[1]
            final_arra.append(s)
        except IndexError:
            continue

    for i in range(0, len(final_arra)):
            s = final_arra[i].split('"/>')[0]
            final_arra1.append(s)

    for i in range(0, len(final_arra1), 2):
        try:
            print(final_arra1[i], ' subclassof ', final_arra1[i+1])
        except IndexError:
            continue

def pre_process2(filename):
    arra, arra1 = inverseproperty(filename)
    final_arra = []
    final_arra1 = []
    final_arra2 = []

    for i in range(0, len(arra)):
        try:
            s = arra[i].split('#')[1]
            final_arra.append(s)
        except IndexError:
            continue

    for i in range(0, len(final_arra)):
            s = final_arra[i].split('"/>')[0]
            final_arra1.append(s)

    for i in range(0, len(final_arra1), 2):
        try:
            print(final_arra1[i], ' inversepropertyof ', final_arra1[i+1])
        except IndexError:
            continue

def pre_process3(filename):
    arra, arra1 = axiom_disjoinclass(filename)
    final_arra = []
    final_arra1 = []
    final_arra2 = []

    for i in range(0, len(arra)):
        try:
            s = arra[i].split('#')[1]
            final_arra.append(s)
        except IndexError:
            continue

    for i in range(0, len(final_arra)):
            s = final_arra[i].split('"/>')[0]
            final_arra1.append(s)
    
    for i in range(0, len(final_arra1), 2):
        try:
            print(final_arra1[i], ' disjoint class ', final_arra1[i+1])
        except IndexError:
            continue

def pre_process4(filename):
    arra, arra1 = subobjectproperty(filename)
    final_arra = []
    final_arra1 = []
    final_arra2 = []

    for i in range(0, len(arra)):
        try:
            s = arra[i].split('#')[1]
            final_arra.append(s)
        except IndexError:
            continue

    for i in range(0, len(final_arra)):
            s = final_arra[i].split('"/>')[0]
            final_arra1.append(s)
       
    for i in range(0, len(final_arra1), 2):
        try:
            print(final_arra1[i], ' subobjectpropertyof ', final_arra1[i+1])
        except IndexError:
            continue

def main():
    root=sys.argv[1]
    for filename in os.listdir(root):
        file=os.path.join(root,filename)
        #print(file)
        pre_process1(file)
        pre_process2(file)
        pre_process3(file)
        pre_process4(file)

def write():
                orig_stdout = sys.stdout

                f = open('Onto/src/main/resources/axiom.txt', 'w')
                sys.stdout = f
                
                main()

                sys.stdout = orig_stdout
                f.close()
                
    
write()

